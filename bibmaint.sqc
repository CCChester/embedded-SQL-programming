#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#define BUF_SIZE 4096
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
     sqlint32 aid;
     char name[23];
     char url[43];
     char pubid[11];
     sqlint32 aorder;
     char title[71];
     char publisher[51];
     sqlint32 year;
     sqlint32 volume;
     sqlint32 number;
     char appearsin[11];
     sqlint32 startpage;
     sqlint32 endpage;
     sqlint32 check_value;
     const char db[6] = "CS348";
EXEC SQL END DECLARE SECTION;

void author(){
	aid = atoi(strtok(NULL, "#"));
	char *mytemp;
	mytemp = strtok(NULL,")");
	strcpy(name,mytemp);
	EXEC SQL select count(*) INTO :check_value from author where aid = :aid;
    if(check_value == 0){
      EXEC SQL insert into author (aid,name) values (:aid, :name);
	}
    else{
   	  EXEC SQL update author set name = :name where aid = :aid;
    }
	printf("Author ID: %d\nName:%s\n", aid, name);
}

void authorurl(){
	aid = atoi(strtok(NULL,"#"));
	char *mytemp;
	mytemp = strtok(NULL,"");
	printf("Anthor ID:%d\nURL:%s\n", aid, url);
	EXEC SQL update author set url = :url where aid = :aid;
}

void journal(){
	char *mytemp;
    mytemp = strtok(NULL,"#");
    strcpy(pubid,mytemp);
    mytemp = strtok(NULL,"#");
    strcpy(title,mytemp);
    EXEC SQL delete from wrote where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from proceedings where pubid in
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from jornal where pubid in
     (select pupid from publication where pubid = :pubid);
    EXEC SQL delete from book where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from article where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL select count(*) INTO: check_value from 
      publication where pubid = :pubid;
    if(check_value == 0){
      EXEC SQL insert into publication values (:pubid, :title);
    }
    else{
      EXEC SQL update publication set title = :title where pubid = :pubid;
    }
	volume = atoi(strtok(NULL,"#"));
    number = atoi(strtok(NULL,"#"));
    year = atoi(strtok(NULL,")"));
    printf("Pubid: %s\n", pubid);
    printf("Type: journal\n");
    printf("Authors:\n");
    printf("Title: %s\n", title);
    printf("Volume: %d\nNumber: %d\nYear:%d\n", volume, number, year);
    EXEC SQL insert into journal values (:pubid, :volume, :number, :year);
}

void proceedings(){
	char *mytemp;
    mytemp = strtok(NULL,"#");
    strcpy(pubid,mytemp);
    mytemp = strtok(NULL,"#");
    strcpy(title,mytemp);
    EXEC SQL delete from wrote where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from proceedings where pubid in
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from jornal where pubid in
     (select pupid from publication where pubid = :pubid);
    EXEC SQL delete from book where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from article where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL select count(*) INTO: check_value from 
      publication where pubid = :pubid;
    if(check_value == 0){
      EXEC SQL insert into publication values (:pubid, :title);
    }
    else{
      EXEC SQL update publication set title = :title where pubid = :pubid;
    }
	year = atoi(strtok(NULL,")"));
	printf("Pubid: %s\n", pubid);
    printf("Type: proceedings\n");
    printf("Authors:\n");
    printf("Title: %s\n", title);
    printf("Year: %d\n", year);
    EXEC SQL insert into proceedings values (:pubid, :year);
}

void book(){
	char *mytemp;
    mytemp = strtok(NULL,"#");
    strcpy(pubid,mytemp);
    mytemp = strtok(NULL,"#");
    strcpy(title,mytemp);
    EXEC SQL delete from wrote where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from proceedings where pubid in
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from jornal where pubid in
     (select pupid from publication where pubid = :pubid);
    EXEC SQL delete from book where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from article where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL select count(*) INTO: check_value from 
      publication where pubid = :pubid;
    if(check_value == 0){
      EXEC SQL insert into publication values (:pubid, :title);
    }
    else{
      EXEC SQL update publication set title = :title where pubid = :pubid;
    }
	char *newchar;
	char *newauthor;
	newauthor = strtok(NULL,"#");
	newchar = strtok(NULL, "#");
	strcpy(publisher,newchar);
	year = atoi(strtok(NULL, ")"));
	printf("Pubid: %s\n", pubid);
    printf("Type: book\n");
    char *mytemp2 = newauthor;
    printf("Authors: ", pubid); 
    int aorder = 1;
    while (mytemp2 = strtok(mytemp2,";")){
        aid = atoi(mytemp);
        EXEC SQL insert into wrote (aid,pubid,aorder) values (:aid, :pubid, :aorder);
        EXEC SQL select trim(name) INTO :name from author where aid = :aid;
        printf("%s", name);
        if ((mytemp2 = strtok(NULL,";")) == NULL){
            break;
        }
        printf(", ");
        aorder++;
    }
    printf("");
    printf("\n");
    printf("Publisher: %s\nYear:%d\n", publisher, year);
    EXEC SQL insert into book values (:pubid, :publisher, :year);
}

void article(){
	char *mytemp;
    mytemp = strtok(NULL,"#");
    strcpy(pubid,mytemp);
    mytemp = strtok(NULL,"#");
    strcpy(title,mytemp);
    EXEC SQL delete from wrote where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from proceedings where pubid in
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from jornal where pubid in
     (select pupid from publication where pubid = :pubid);
    EXEC SQL delete from book where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL delete from article where pubid in 
     (select pubid from publication where pubid = :pubid);
    EXEC SQL select count(*) INTO: check_value from 
      publication where pubid = :pubid;
    if(check_value == 0){
      EXEC SQL insert into publication values (:pubid, :title);
    }
    else{
      EXEC SQL update publication set title = :title where pubid = :pubid;
    }
	char *newchar;
	char *newauthor;
	newauthor = strtok(NULL,"#");
    newchar = strtok(NULL,"#");
    strcpy(appearsin, newchar);
    startpage = atoi(strtok(NULL,"#"));
    endpage = atoi(strtok(NULL,"#"));
    printf("Pubid: %s\n", pubid);
    printf("Type: article\n");
    char *mytemp2 = newauthor;
    printf("Authors: ", pubid); 
    int aorder = 1;
    while(mytemp = strtok(mytemp2,";")){
        aid = atoi(mytemp2);
        EXEC SQL insert into wrote (aid,pubid,aorder) values (:aid, :pubid, :aorder);
        EXEC SQL select trim(name) INTO :name from author where aid = :aid;
        printf("%s", name);
        if ((mytemp2 = strtok(NULL,";")) == NULL){
            break;
        }
        printf(", ");
        aorder++;
    }
    printf("");
    printf("\n");
    printf("Title: %s\n", title);
    printf("In:%s\nPages: %d-%d\n", appearsin, startpage, endpage);
    EXEC SQL insert into article values (:pubid, :appearsin, :startpage, :endpage);
}

int main(){
	EXEC SQL WHENEVER SQLERROR GO TO error;
	EXEC SQL CONNECT TO :db;
    printf("CONNECTED\n");
    size_t bufsize = (BUF_SIZE);
    char *token;
    char *args = malloc(BUF_SIZE);
    while(getline(&args,&bufsize,stdin)){
    	if(feof(stdin)){
    		break;
    	}
    	token = strtok(args, "(");
    	if (strcmp(token,"author") == 0){
            author();
    	} 
        if (strcmp(token,"authorurl") == 0) {
        	authorurl();
        }
        if (strcmp(token,"book") == 0){
        	book();
        }
        if (strcmp(token,"journal") == 0){
        	journal();
        }
        if (strcmp(token,"proceedings") == 0){
        	proceedings();
        }
        if (strcmp(token,"article") == 0){
        	article();
        }
    }
    free(args);
	EXEC SQL COMMIT;
	EXEC SQL CONNECT reset;
	exit(0);
error:
	check_error("My error",&sqlca);
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK;
	EXEC SQL CONNECT reset;
	return 1;
}
